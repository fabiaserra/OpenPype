variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_NAME: op-worker

stages:
  - build
  - deploy
  - release

build-binary:
  services:
    - name: docker:25.0.4-dind
      alias: docker
  tags:
    - dind
  stage: build
  image: docker:25.0.4-cli
  variables:
    BUILD_OS: ubuntu22.04
  script:
    - apk add --no-cache bash
    - apk add --no-cache curl
    - apk add --no-cache python3
    - ./tools/docker_build.sh $BUILD_OS
    - VERSION=$(sed -n 's/__version__ = \"\(.*\)\"/\1/p' openpype/version.py)
    - "tar -czvf ./build/openpype-${VERSION}-${BUILD_OS}.tar.gz ./build"
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ./build/openpype-${VERSION}-${BUILD_OS}.tar.gz "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/openpype/${VERSION}/openpype-${VERSION}-${BUILD_OS}.tar.gz"'
  artifacts:
    paths:
      - ./build
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "release/alkemyx"
      when: manual
    - if: $CI_COMMIT_BRANCH == "release/alkemyx-develop"
      when: manual
    - when: manual

build-op-container:
  stage: build
  tags:
    - kube
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ci:$CW_GROUP_CI_TOKEN | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/op-container"
      --dockerfile "${CI_PROJECT_DIR}/op-container/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
      --build-arg "CW_GROUP_CI_TOKEN=${CW_GROUP_CI_TOKEN}"
      --cache=true --cache-copy-layers=true --cache-repo "${CI_REGISTRY_IMAGE}/cache/${IMAGE_NAME}" --cache-dir=/cache
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "release/alkemyx"
      when: manual
    - if: $CI_COMMIT_BRANCH == "release/alkemyx-develop"
      when: manual

build-patch:
  stage: build
  tags:
    - kube
  image: dm.tenant-alkemyx.lga1.ingress.coreweave.cloud/coreweave/pipeline/openpype/op-worker:afe8defa
  variables:
    DNS_SERVER: "10.20.53.229"
    SEARCH_DOMAIN: "tenant-alkemyx.svc.tenant.chi.local"
  script:
    - mkdir -p $CI_PROJECT_DIR/artifact/build
    - openpype_console --debug run $CI_PROJECT_DIR/tools/create_zip.py --path $CI_PROJECT_DIR/artifact/build --repo-dir $CI_PROJECT_DIR
  artifacts:
    paths:
      - artifact
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: manual
  allow_failure: false

deploy-patch:
  stage: deploy
  needs:
    - build-patch
  image: alpine:latest
  tags:
    - mnt-pipe
  script:
    - cp -R ./artifact/build/* /pipe/openpype/versions/
    - chown -R 1000:776523089 /pipe/openpype/versions
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

deploy-binary:
  image: alpine:latest
  tags:
    - mnt-pipe
  stage: deploy
  dependencies:
    - build-binary
  needs:
    - build-binary
  before_script:
    - apk update && apk add --no-cache rsync
  script:
    - CURRENT_VERSION_DIR="/pipe/openpype/release/current"
    - BACKUP_DIR="/pipe/openpype/release/versions"
    - mkdir -p ${CURRENT_VERSION_DIR} && mkdir -p ${BACKUP_DIR}
    - |
      DATE=$(date "+%Y-%m-%d_%H-%M-%S")
      mkdir -p ${BACKUP_DIR}/${DATE}
      cp ./build/*.tar.gz ${BACKUP_DIR}/${DATE}/
    - rsync -av --delete ./build/exe*/ ${CURRENT_VERSION_DIR}/
    - chown -R 1000:776523089 ${CURRENT_VERSION_DIR}
    - chmod -R 755 ${CURRENT_VERSION_DIR}
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

release-patch:
  stage: release
  needs:
    - deploy-patch
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - VERSION=$(sed -n 's/__version__ = \"\(.*\)\"/\1/p' openpype/version.py)
    - >
      if release-cli get --tag-name "${VERSION}"; then
        echo "Release "${VERSION}" already exists, updating..."
        release-cli update --description "Release ${VERSION} using CI pipeline $CI_PIPELINE_ID" --tag-name "${VERSION}"
      else
        echo "Release "${VERSION}" does not exist, creating..."
        release-cli create --description "Release ${VERSION} using CI pipeline $CI_PIPELINE_ID" --tag-name "${VERSION}"
      fi
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

deploy-to-deadline:
  image: alpine:latest
  tags:
    - mnt-deadline
  stage: build
  script:
    - apk add rsync
    - rsync -avh --chmod=777 --chown=995:776523089 $CI_PROJECT_DIR/openpype/modules/deadline/repository/custom/plugins/* /deadline-10-3-1-3/custom/plugins/
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "release/alkemyx"
      when: manual
    - if: $CI_COMMIT_BRANCH == "release/alkemyx-develop"
      when: manual
